import telebot
from telebot import types
import psycopg2
import logging

db_params = {
    'dbname': 'postgres',
    'user': 'postgres',
    'password': '123',
    'host': 'localhost',
    'port': '5432'
}

logging.basicConfig(filename='bot.log', level=logging.DEBUG, format='%(asctime)s %(levelname)s %(message)s')

bot_token = "6801426896:AAEe_QBTudQG2xBjR408CTgKjemgsYdIJ2g"
bot = telebot.TeleBot(bot_token)
user_data = {}

def execute_query(query, values=None):
    conn = psycopg2.connect(**db_params)
    cursor = conn.cursor()
    try:
        if values:
            cursor.execute(query, values)
        else:
            cursor.execute(query)
        conn.commit()
        result = cursor.fetchall()
    except Exception as e:
        conn.rollback()
        logging.exception("Произошло исключение: %s", str(e))
        result = None
    finally:
        conn.close()
    return result

@bot.message_handler(commands=['get_product'])
def handle_get_product(message):
    bot.send_message(message.chat.id, 'Введите ID товара:')
    bot.register_next_step_handler(message, process_product_id)

def process_product_id(message):
    product_id = message.text.strip()
    product = get_product_by_id(product_id)
    if product:
        product_info = f"ID товара: {product[0]}\nНазвание: {product[1]}\nЦена: {product[2]}"
        bot.send_message(message.chat.id, product_info)
    else:
        bot.send_message(message.chat.id, 'Товар с указанным ID не найден')

def get_product_by_id(product_id):
    query = "SELECT id, name, price FROM products WHERE id = %s"
    result = execute_query(query, (product_id,))
    return result[0] if result else None

@bot.message_handler(commands=['start'])
def handle_start(message):
    markup = types.ReplyKeyboardMarkup()
    get_product = types.KeyboardButton('/get_product')
    reg = types.KeyboardButton("/reg")
    login = types.KeyboardButton("/login")
    login_button = types.KeyboardButton('/login_button') 
    help = types.KeyboardButton('/help')
    markup.add(reg, login, help, login_button, get_product) 
    bot.reply_to(message, "Привет! Я бот. Как дела?", reply_markup=markup)

@bot.message_handler(commands=['help'])
def handle_help(message):
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="Тех поддержка", url="https://t.me/@llosintll")
    markup.add(button)
    bot.reply_to(message, "Если у вас проблемы, можете обращаться тут", reply_markup=markup)

@bot.message_handler(commands=['reg'])
def handle_reg(message):
    bot.send_message(message.chat.id, 'Введите логин')
    user_data[message.chat.id] = {"step": "login"}

@bot.message_handler(func=lambda message: user_data.get(message.chat.id) and user_data[message.chat.id]["step"] == "login")
def handle_login(message):
    user_data[message.chat.id]["login"] = message.text
    bot.send_message(message.chat.id, 'Введите пароль')
    user_data[message.chat.id]["step"] = "password"

@bot.message_handler(func=lambda message: user_data.get(message.chat.id) and user_data[message.chat.id]["step"] == "password")
def handle_password(message):
    user_data[message.chat.id]["password"] = message.text
    login = user_data[message.chat.id]["login"]
    password = user_data[message.chat.id]["password"]
    
    query = "INSERT INTO users (login, password) VALUES (%s, %s)"
    execute_query(query, (login, password))
    
    bot.send_message(message.chat.id, f'Вы зарегистрированы. Логин: {login}, Пароль: {password}')
    del user_data[message.chat.id]


@bot.message_handler(commands=['login'])
def handle_reg(message):
    bot.send_message(message.chat.id, 'Введите логин')
    user_data[message.chat.id] = {"step": "login"}

@bot.message_handler(func=lambda message: user_data.get(message.chat.id) and user_data[message.chat.id]["step"] == "login")
def handle_login_input(message):
    login = message.text.strip()
    user = check_user_exists(login)
    
    if user:
        bot.send_message(message.chat.id, 'Введите пароль')
        user_data[message.chat.id]["user"] = user
        user_data[message.chat.id]["step"] = "password"
    else:
        bot.send_message(message.chat.id, 'Пользователь с таким логином не найден. Пожалуйста, зарегистрируйтесь.')

@bot.message_handler(func=lambda message: user_data.get(message.chat.id) and user_data[message.chat.id]["step"] == "password")
def handle_password(message):
    password = message.text
    login = user_data[message.chat.id]["user"]["login"]
    
    user_authenticated = check_user_password(login, password)
    if user_authenticated:
        bot.send_message(message.chat.id, f'Вы успешно вошли как {login}!')
    else:
        bot.send_message(message.chat.id, 'Неправильный пароль. Попробуйте снова или зарегистрируйтесь.')

@bot.message_handler(commands=['login_button'])
def handle_login_button(message):
    markup = types.ReplyKeyboardMarkup()
    login = types.KeyboardButton("/login")
    markup.add(login)
    bot.reply_to(message, "Введите свой логин и пароль для входа:", reply_markup=markup)
    user_data[message.chat.id] = {"step": "login_button"}

@bot.message_handler(func=lambda message: user_data.get(message.chat.id) and user_data[message.chat.id]["step"] == "login_button")
def handle_login_button_input(message):
    login, password = message.text.strip().split()
    user_authenticated = check_user_password(login, password)
    
    if user_authenticated:
        bot.send_message(message.chat.id, f'Вы успешно вошли как {login}!')
    else:
        bot.send_message(message.chat.id, 'Неправильный логин или пароль. Попробуйте снова или зарегистрируйтесь.')

def check_user_exists(login):
    query = "SELECT * FROM users WHERE login = %s"
    result = execute_query(query, (login,))
    return result[0] if result else None

def check_user_password(login, password):
    query = "SELECT * FROM users WHERE login = %s AND password = %s"
    result = execute_query(query, (login, password))
    return result[0] if result else None

if __name__ == "__main__": 
    bot.polling(none_stop=True)
    
