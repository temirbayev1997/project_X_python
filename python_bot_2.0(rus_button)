import telebot
from telebot import types
import psycopg2
import logging
 
db_params = {
    'dbname': 'telebot_python',
    'user': 'postgres',
    'password': '123',
    'host': 'localhost',
    'port': '5432'
}

logging.basicConfig(filename='bot.log', level=logging.DEBUG, format='%(asctime)s %(levelname)s %(message)s')

bot_token = "6801426896:AAEe_QBTudQG2xBjR408CTgKjemgsYdIJ2g"
bot = telebot.TeleBot(bot_token)

user_data = {}

def execute_query(query, values=None):
    conn = psycopg2.connect(**db_params)
    cursor = conn.cursor()
    try:
        if values:
            cursor.execute(query, values)
        else:
            cursor.execute(query)
        conn.commit()
        result = cursor.fetchall()
    except Exception as e:
        conn.rollback()
        logging.exception("Произошло исключение: %s", str(e))
        result = None
    finally:
        conn.close()
    return result


conn = psycopg2.connect(**db_params)
cur = conn.cursor()

cur.execute("""
    CREATE TABLE IF NOT EXISTS products (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        price DECIMAL(10, 2) NOT NULL,
        pic bytea
    )
""")
conn.commit()


# Обработчик /start
@bot.message_handler(func=lambda message: message.text == '/start')
def handle_start(message):
    if message.chat.id not in user_data:
        markup = types.ReplyKeyboardMarkup()
        reg = types.KeyboardButton('Регистрация пользователя')
        help_button = types.KeyboardButton('Тех поддержка')
        login_button = types.KeyboardButton('Войти в профиль')
        markup.row(reg, help_button)
        markup.row(login_button)
        bot.reply_to(message, 'Добро пожаловать! Чтобы начать, зарегистрируйтесь или войдите в профиль.', reply_markup=markup)
        user_data[message.chat.id] = {"step": "start"}
    else:
        bot.send_message(message.chat.id, 'Вы уже авторизованы. Используйте доступные опции.')


# Обработчик Войти в профиль
@bot.message_handler(func=lambda message: message.text == 'Войти в профиль')
def handle_login_button_start(message):
    markup = types.ReplyKeyboardMarkup()
    login = types.KeyboardButton('Войти в профиль')
    catalog_button = types.KeyboardButton('Каталог товаров')
    cart_button = types.KeyboardButton('Корзина')
    favorites_button = types.KeyboardButton('Избарнные товаров')
    help_button = types.KeyboardButton('Тех поддержка')
    add_to_cart_button = types.KeyboardButton('/add_to_cart')
    add_to_favorites_button = types.KeyboardButton('/add_to_favorites')
    back_up = types.KeyboardButton ('Выход')
    markup.add(add_to_favorites_button, add_to_cart_button, help_button)
    markup.row(catalog_button, cart_button, favorites_button)
    markup.row(back_up)
    bot.reply_to(message, "Введите свой логин:", reply_markup=markup)
    user_data[message.chat.id] = {"step": "login"}


# Обработчик выхода
@bot.message_handler(func=lambda message: message.text == 'Выход')
def handle_logout(message):
    user_id = message.chat.id
    if user_id in user_data:
        del user_data[user_id]
        bot.send_message(user_id, "Вы успешно вышли.")
        # Выводим приветственное сообщение после выхода
        markup = types.ReplyKeyboardMarkup()
        reg = types.KeyboardButton('Регистрация пользователя')
        help_button = types.KeyboardButton('Тех поддержка')
        login_button = types.KeyboardButton('Войти в профиль')
        markup.row(reg, help_button)
        markup.row(login_button)
        bot.send_message(user_id, 'Добро пожаловать! Чтобы начать, зарегистрируйтесь или войдите в профиль.', reply_markup=markup)
    else:
        bot.send_message(user_id, "Вы не вошли в аккаунт.")

# Обработчик нажатия на кнопку "Войти в профиль"
@bot.message_handler(func=lambda message: message.text == 'Войти в профиль')
def handle_login_start(message):
    bot.send_message(message.chat.id, 'Введите свой логин:')
    user_data[message.chat.id] = {"step": "login"}

# Обработчик нажатия на кнопку "Регистрация пользователя"
@bot.message_handler(func=lambda message: message.text == 'Регистрация пользователя')
def handle_reg_start(message):
    if 'step' not in user_data.get(message.chat.id, {}):
        markup = types.ReplyKeyboardMarkup()
        back_up = types.KeyboardButton ('Выход')
        markup.add(back_up)
        bot.reply_to(message, 'Введите логин для регистрации:', reply_markup=markup)
        user_data[message.chat.id] = {"step": "register"}


# Обработчик ввода логина для входа
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "login")
def handle_login_input(message):
    login = message.text.strip()
    if is_login_unique(login):
        bot.send_message(message.chat.id, 'Логин не найден. Попробуйте снова или зарегистрируйтесь.')
    else:
        bot.send_message(message.chat.id, 'Введите пароль для входа:')
        user_data[message.chat.id]["login"] = login
        user_data[message.chat.id]["step"] = "password"

# Обработчик ввода логина для регистрации
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "register")
def handle_register_input(message):
    login = message.text.strip()
    if is_login_unique(login):
        bot.send_message(message.chat.id, 'Логин уникален. Теперь введите пароль для регистрации.')
        user_data[message.chat.id]["login"] = login
        user_data[message.chat.id]["step"] = "password"
    else:
        bot.send_message(message.chat.id, 'Логин уже занят. Попробуйте другой логин.')

# Кнопка тех поддержки
@bot.message_handler(func=lambda message: message.text == 'Тех поддержка')
def handle_help(message):
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="Тех поддержка", url="https://t.me/@llosintll")
    markup.add(button)
    bot.reply_to(message, "Если у вас проблемы, можете обращаться тут", reply_markup=markup)

# Проверка наличия пользователя в базе данных по ID Telegram
def user_exists_in_database(user_id):
    query = "SELECT * FROM users WHERE telegram_id = %s"
    result = execute_query(query, (user_id,))
    return bool(result)


# Проверка уникальности логина в базе данных
def is_login_unique(login):
    query = "SELECT * FROM users WHERE login = %s"
    result = execute_query(query, (login,))
    return len(result) == 0  # Возвращает True, если результат пустой (логин уникален)


# Проверка пароля пользователя
def check_user_password(login, password):
    query = "SELECT * FROM users WHERE login = %s AND password = %s"
    result = execute_query(query, (login, password))
    return len(result) > 0  # Возвращает True, если есть хотя бы одна запись (логин и пароль верны)


# Вывод продуктов с базой данных
def get_product_by_id(product_id):
    query = "SELECT id, name, price FROM products WHERE id = %s"
    result = execute_query(query, (product_id,))
    return result[0] if result else None

# Мадик напишешь тут крч как чекнишь я хз че это еще исправь ее я хз как она должна дейстоввать
def display_catalog(chat_id):
    products = get_product_by_id()
    if products:
        catalog_info = "\n".join([f"ID товара: {product[0]}\nНазвание: {product[1]}\nЦена: {product[2]}\n" for product in products])
        bot.send_message(chat_id, catalog_info)
    else:
        bot.send_message(chat_id, 'Товары не найдены')

# Функция каталог и как она работает
@bot.message_handler(func=lambda message: message.text == 'Каталог товаров')
def handle_catalog(message):
    display_catalog(message.chat.id)

# Функция избранное
@bot.message_handler(func=lambda message: message.text == 'Избарнные товаров') 
def handle_favorites(message):
    user_id = message.chat.id
    favorites = user_data.get(user_id, {}).get('Избранные', [])
    
    if favorites:
        favorites_info = "\n".join([f"ID товара: {product['id']}\nНазвание: {product['name']}\nЦена: {product['price']}\n" for product in favorites])
        bot.send_message(message.chat.id, "Избранные товары:\n" + favorites_info)
    else:
        bot.send_message(message.chat.id, 'Избранных товаров нет')



# Функция корзина
@bot.message_handler(func=lambda message: message.text == 'Корзина')
def handle_cart(message):
    user_id = message.chat.id
    cart = user_data.get(user_id, {}).get('Корзина', [])
    
    if cart:
        cart_info = "\n".join([f"ID товара: {product['id']}\nНазвание: {product['name']}\nЦена: {product['price']}\n" for product in cart])
        bot.send_message(message.chat.id, "Корзина:\n" + cart_info)
    else:
        bot.send_message(message.chat.id, 'Корзина пуста')


# Функция поиска
@bot.message_handler(func=lambda message: message.text == 'Поиск товаров по ID')
def handle_duct(message):
    bot.send_message(message.chat.id, 'Введите ID товара:')
    bot.register_next_step_handler(message, process_product_id)


# Функция поиска по ID
def process_product_id(message):
    product_id = message.text.strip()
    product = get_product_by_id_with_photo(product_id)
    
    if product:
        product_info = f"ID товара: {product[0]}\nНазвание: {product[1]}\nЦена: {product[2]}\nФото: {product[3]}"
        bot.send_message(message.chat.id, product_info)

        if product[3]:
            bot.send_photo(message.chat.id, open(product[3], 'rb'), caption='Фото товара')
        else:
            bot.send_message(message.chat.id, 'У этого товара нет изображения')
    else:
        bot.send_message(message.chat.id, 'Товар с указанным ID не найден')

#  Функция поиска по ID с фото
def get_product_by_id_with_photo(product_id):
    cur.execute("SELECT * FROM products_msi WHERE id = %s", (product_id,))
    return cur.fetchone()

# Функция добавления в избранное
@bot.message_handler(commands=['add_to_favorites'])
def handle_add_to_favorites(message):
    user_id = message.chat.id
    bot.send_message(message.chat.id, 'Введите ID товара для добавления в избранное:')
    bot.register_next_step_handler(message, process_add_to_favorites)

# Процедура добавления в избранное
def process_add_to_favorites(message):
    user_id = message.chat.id
    product_id = message.text.strip()

    product = get_product_by_id(product_id)
    if product:
        favorites = user_data.setdefault(user_id, {}).setdefault('favorites', [])
        if not any(p['id'] == product_id for p in favorites):
            favorites.append({
                'id': product[0],
                'name': product[1],
                'price': product[2]
            })
            bot.send_message(message.chat.id, 'Товар добавлен в избранное')
        else:
            bot.send_message(message.chat.id, 'Товар уже в избранном')
    else:
        bot.send_message(message.chat.id, 'Товар с указанным ID не найден')


#  Добавление в корзину 
@bot.message_handler(commands=['add_to_cart'])
def handle_add_to_cart(message):
    user_id = message.chat.id
    bot.send_message(message.chat.id, 'Введите ID товара для добавления в корзину:')
    bot.register_next_step_handler(message, process_add_to_cart)


#  Процедура добавления в корзину(я не вдупляю че тут на самом деле тупо скопиравал сверху)
def process_add_to_cart(message):
    user_id = message.chat.id
    product_id = message.text.strip()

    product = get_product_by_id(product_id)
    if product:
        cart = user_data.setdefault(user_id, {}).setdefault('cart', [])
        if not any(p['id'] == product_id for p in cart):
            cart.append({
                'id': product[0],
                'name': product[1],
                'price': product[2]
            })
            bot.send_message(message.chat.id, 'Товар добавлен в корзину')
        else:
            bot.send_message(message.chat.id, 'Товар уже в корзине')
    else:
        bot.send_message(message.chat.id, 'Товар с указанным ID не найден')


# Функция удаления из избранного
def get_product_by_id(product_id):
    query = "SELECT id, name, price FROM products WHERE id = %s"
    result = execute_query(query, (product_id,))
    return result[0] if result else None
 
# Выполнение запроса в базу данных
def save_user_to_database(login, password):
    query = "INSERT INTO users (login, password) VALUES (%s, %s)"
    execute_query(query, (login, password))

if __name__ == "__main__": 
    bot.polling(none_stop=True)
