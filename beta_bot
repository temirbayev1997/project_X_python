# починить избранного, корзины и неизв команды
import telebot
from telebot import types
import psycopg2
import logging

db_params = {
    'dbname': 'telebot',
    'user': 'postgres',
    'password': '123',
    'host': 'localhost',
    'port': '5432'
}

logging.basicConfig(filename='bot.log', level=logging.DEBUG, format='%(asctime)s %(levelname)s %(message)s')

bot_token = "6801426896:AAEe_QBTudQG2xBjR408CTgKjemgsYdIJ2g"
bot = telebot.TeleBot(bot_token)

user_data = {}

def execute_query(query, values=None):
    conn = psycopg2.connect(**db_params)
    cursor = conn.cursor()
    try:
        if values:
            cursor.execute(query, values)
        else:
            cursor.execute(query)
        conn.commit()
        result = cursor.fetchall()
    except Exception as e:
        conn.rollback()
        logging.exception("Произошло исключение: %s", str(e))
        result = None
    finally:
        conn.close()
    return result


conn = psycopg2.connect(**db_params)
cur = conn.cursor()

cur.execute("""
    CREATE TABLE IF NOT EXISTS products (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        price DECIMAL(10, 2) NOT NULL
    )
""")
conn.commit()

cur.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        login VARCHAR(255) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL
    )
""")    
conn.commit()




# Обработчик команды /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    if message.chat.id not in user_data:
        show_registration_menu(message)
    else:
        bot.send_message(message.chat.id, 'Вы уже авторизованы. Используйте доступные опции.')

# Показать меню регистрации
def show_registration_menu(message):
    markup = types.ReplyKeyboardMarkup()
    reg = types.KeyboardButton('Регистрация пользователя')
    help_button = types.KeyboardButton('Тех поддержка')
    login_button = types.KeyboardButton('Войти в профиль')
    guide = types.KeyboardButton('Гайд')
    markup.row(reg, login_button)
    markup.row(help_button, guide)
    bot.reply_to(message, 'Добро пожаловать! Чтобы начать, зарегистрируйтесь или войдите в профиль.', reply_markup=markup)
    user_data[message.chat.id] = {"step": "start"}

# кнопка гайд
@bot.message_handler(func=lambda message: message.text == 'Гайд')
def handle_guide(message):
    bot.reply_to(message, "хз че это")



# Обработчик нажатия на кнопку "Регистрация пользователя"
@bot.message_handler(func=lambda message: message.text == 'Регистрация пользователя')
def handle_registration_start(message):
    bot.reply_to(message, "Введите желаемый логин:")
    user_data[message.chat.id] = {"step": "register_login"}



# Показать меню входа# Показать меню входа
def show_login_menu(message):
    markup = types.ReplyKeyboardMarkup()
    # каталог товаров
    catalog_button = types.KeyboardButton('Каталог товаров')
    # избранные товары
    add_to_favorites_button = types.KeyboardButton('Добавить в избранное')
    favorites_button = types.KeyboardButton('Избранные товары')
    del_favorites_button = types.KeyboardButton('Удалить из избранного')
    # корзина
    cart_button = types.KeyboardButton('Корзина')
    add_to_cart_button = types.KeyboardButton('Добавить в корзину')
    del_cart_button = types.KeyboardButton('Удалить из корзины')
    # разное
    help_button = types.KeyboardButton('Тех поддержка')
    guide = types.KeyboardButton('Гайд')
    back_up = types.KeyboardButton('Выход')
    markup.add(catalog_button)
    markup.row(favorites_button, add_to_favorites_button, del_favorites_button)
    markup.row(cart_button, add_to_cart_button, del_cart_button)
    markup.row(help_button, guide)
    markup.row(back_up)
    bot.send_message(message.chat.id, 'Вы успешно вошли в профиль!', reply_markup=markup)
    user_data[message.chat.id] = {"step": "login"}



# починить это надо
# # функция для обработки команд неизвестных пользователем
# @bot.message_handler(func=lambda message: True)
# def handle_other(message):
#       bot.send_message(message.chat.id, "Я не понимаю эту команду.")



# Кнопка тех поддержки
@bot.message_handler(func=lambda message: message.text == 'Тех поддержка')
def handle_help(message):
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="Тех поддержка", url="https://t.me/@llosintll")
    markup.add(button)
    bot.reply_to(message, "Если у вас проблемы, можете обращаться тут", reply_markup=markup)



# Обработчик выхода
@bot.message_handler(func=lambda message: message.text == 'Выход')
def handle_logout(message):
    user_id = message.chat.id
    if user_id in user_data:
        del user_data[user_id]
        bot.send_message(user_id, "Вы успешно вышли.")
        # Выводим приветственное сообщение после выхода
        markup = types.ReplyKeyboardMarkup()
        reg = types.KeyboardButton('Регистрация пользователя')
        help_button = types.KeyboardButton('Тех поддержка')
        profile_button = types.KeyboardButton('Войти в профиль')
        guide = types.KeyboardButton('Гайд')
        markup.row(reg, profile_button)
        markup.row(help_button, guide)
        bot.send_message(user_id, 'Добро пожаловать! Чтобы начать, зарегистрируйтесь или войдите в профиль.', reply_markup=markup)
    else:
        bot.send_message(user_id, "Вы не вошли в аккаунт.")


# Обработчик ввода логина при регистрации
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "register_login")
def handle_register_login(message):
    login = message.text

    # Проверяем, существует ли уже такой логин в базе данных
    query = "SELECT * FROM users WHERE login = %s"
    result = execute_query(query, (login,))

    if result:
        bot.reply_to(message, "Этот логин уже занят. Пожалуйста, выберите другой.")
    else:
        # Логин уникален, продолжаем регистрацию
        user_data[message.chat.id]["login"] = login
        bot.reply_to(message, "Введите пароль:")
        user_data[message.chat.id]["step"] = "register_password"


# Обработчик ввода пароля при регистрации
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "register_password")
def handle_register_password(message):
    password = message.text
    login = user_data[message.chat.id]["login"]

# Сохраняем пользователя в базе данных
    query = "INSERT INTO users (login, password) VALUES (%s, %s)"
    execute_query(query, (login, password))
        
    bot.reply_to(message, "Вы успешно зарегистрированы!")
    user_data[message.chat.id] = {}  # Сбросим все данные о состоянии пользователя
    show_login_menu(message)  # Показываем меню входа


# Обработчик нажатия на кнопку "Войти в профиль"
@bot.message_handler(func=lambda message: message.text == 'Войти в профиль')
def handle_login_request(message):
    if "status" in user_data.get(message.chat.id, {}) and user_data[message.chat.id]["status"] == "logged_in":
        bot.send_message(message.chat.id, "Вы уже авторизованы. Используйте доступные опции.")
        return

    bot.reply_to(message, "Введите свой логин:")
    user_data[message.chat.id] = {"step": "check_login"}

# Обработчик ввода логина при попытке входа
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "check_login")
def handle_check_login(message):
    login = message.text

    # Проверяем, есть ли такой логин в базе данных
    query = "SELECT * FROM users WHERE login = %s"
    result = execute_query(query, (login,))

    if result:
        # Логин найден, запрашиваем пароль для проверки
        user_data[message.chat.id]["login"] = login
        bot.reply_to(message, "Введите пароль:")
        user_data[message.chat.id]["step"] = "check_password"
    else:
        bot.reply_to(message, "Логин не найден. Попробуйте снова или зарегистрируйтесь.")



# Обработчик ввода пароля при попытке входа
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get("step") == "check_password")
def handle_check_password(message):
    password = message.text
    login = user_data[message.chat.id]["login"]

    # Проверяем соответствие логина и пароля в базе данных
    query = "SELECT * FROM users WHERE login = %s AND password = %s"
    result = execute_query(query, (login, password))

    if result:
        user_data[message.chat.id] = {}  # Сбросим все данные о состоянии пользователя

        show_login_menu(message)  # Показываем меню входа после успешного входа
            
    else:
        bot.reply_to(message, "Неправильный пароль. Попробуйте снова.")


# Обработчик команды /start после входа
@bot.message_handler(commands=['start'])
def handle_start_after_login(message):
    if message.chat.id not in user_data:
        show_registration_menu(message)
    else:
        if user_data[message.chat.id].get("status") == "logged_in":
            show_login_menu(message)
        else:
            bot.send_message(message.chat.id, 'Вы уже авторизованы. Используйте доступные опции.')


# Вывод продуктов с базой данных
def get_product_by_id(product_id):
    query = "SELECT id, name, price FROM products WHERE id = %s"
    result = execute_query(query, (product_id,))
    return result[0] if result else None

# Исправим проверку наличия товара в избранном и корзине
def is_product_in_list(product_id, product_list, user_id):
    return any(p['id'] == product_id for p in product_list if p.get('user_id') == user_id)

# Функция вывода каталога товаров
def display_catalog(chat_id):
    query = "SELECT id, name, price FROM products"
    products = execute_query(query)
    if products:
        catalog_info = "\n".join([f"ID товара: {product[0]}\nНазвание: {product[1]}\nЦена: {product[2]}\n" for product in products])
        bot.send_message(chat_id, catalog_info)
    else:
        bot.send_message(chat_id, 'Товары не найдены')

# Функция каталог и как она работает
@bot.message_handler(func=lambda message: message.text == 'Каталог товаров')
def handle_catalog(message):
    display_catalog(message.chat.id)

# Функция избранное
@bot.message_handler(func=lambda message: message.text == 'Избранные товары')
def handle_favorites(message):
    user_id = message.chat.id
    cart = user_data.get(user_id, {}).get('Избранные товары', [])
        
    if cart:
        cart_info = "\n".join([f"ID товара: {product['id']}\nНазвание: {product['name']}\nЦена: {product['price']}\n" for product in cart])
        bot.send_message(message.chat.id, "Избранные товары:\n" + cart_info)
    else:
        bot.send_message(message.chat.id, 'Избранные товары нету')


# Функция корзина
@bot.message_handler(func=lambda message: message.text == 'Корзина')
def handle_cart(message):
    user_id = message.chat.id
    cart = user_data.get(user_id, {}).get('Корзина', [])
        
    if cart:
        cart_info = "\n".join([f"ID товара: {product['id']}\nНазвание: {product['name']}\nЦена: {product['price']}\n" for product in cart])
        bot.send_message(message.chat.id, "Корзина:\n" + cart_info)
    else:
        bot.send_message(message.chat.id, 'Корзина пуста')

# Процедура добавления в корзину
def process_add_to_cart(message):
    user_id = message.chat.id
    product_id = message.text.strip()

    product = get_product_by_id(product_id)
    if product:
        cart = user_data.setdefault(user_id, {}).setdefault('Корзина', [])
        if not is_product_in_list(product_id, cart, user_id):
            cart.append({
                'id': product[0],
                'name': product[1],
                'price': product[2],
                'user_id': user_id
            })
            bot.send_message(message.chat.id, 'Товар добавлен в корзину')
        else:
            bot.send_message(message.chat.id, 'Товар уже в корзине')
    else:
        bot.send_message(message.chat.id, 'Товар с указанным ID не найден')



# Функция добавления в избранное
@bot.message_handler(func=lambda message: message.text == 'Добавить в избранное')
def handle_add_to_favorites(message):
    user_id = message.chat.id
    bot.send_message(message.chat.id, 'Введите ID товара для добавления в избранное:')
    bot.register_next_step_handler(message, process_add_to_favorites)

# Функция удаления из корзины
def process_remove_from_cart(message):
    user_id = message.chat.id
    product_id = message.text.strip()

    cart = user_data.get(user_id, {}).get('Корзина', [])
    for product in cart:
        if product['id'] == int(product_id):
            cart.remove(product)
            bot.send_message(message.chat.id, 'Товар успешно удален из корзины')
            return

    
# Обработчик для команды "Удалить из корзины"
@bot.message_handler(func=lambda message: message.text == 'Удалить из корзины')
def handle_remove_from_cart(message):
    bot.send_message(message.chat.id, 'Введите ID товара для удаления из корзины:')
    bot.register_next_step_handler(message, process_remove_from_cart)


# Процедура добавления в избранное
def process_add_to_favorites(message):
    user_id = message.chat.id
    product_id = message.text.strip()

    product = get_product_by_id(product_id)
    if product:
        favorites = user_data.setdefault(user_id, {}).setdefault('Избранные товары', [])
        if not is_product_in_list(product_id, favorites, user_id):
            favorites.append({
                'id': product[0],
                'name': product[1],
                'price': product[2],
                'user_id': user_id  # Добавляем идентификатор пользователя
            })
            bot.send_message(message.chat.id, 'Товар добавлен в избранное')
        else:
            bot.send_message(message.chat.id, 'Товар уже в избранном')
    else:
        bot.send_message(message.chat.id, 'Товар с указанным ID не найден')

# Функция удаления из избранного
def process_remove_from_favorites(message):
    user_id = message.chat.id
    product_id = message.text.strip()

    favorites = user_data.get(user_id, {}).get('Избранные товары', [])
    for product in favorites:
        if product['id'] == int(product_id):
            favorites.remove(product)
            bot.send_message(message.chat.id, 'Товар успешно удален из избранного')
            return


# Обработчик для команды "Удалить из избранного"
@bot.message_handler(func=lambda message: message.text == 'Удалить из избранного')
def handle_remove_from_favorites(message):
    bot.send_message(message.chat.id, 'Введите ID товара для удаления из избранного:')
    bot.register_next_step_handler(message, process_remove_from_favorites)

#  Добавление в корзину 
@bot.message_handler(func=lambda message: message.text =='Добавить в корзину')
def handle_add_to_cart(message):
    user_id = message.chat.id
    bot.send_message(message.chat.id, 'Введите ID товара для добавления в корзину:')
    bot.register_next_step_handler(message, process_add_to_cart)


if __name__ == "__main__": 
    bot.polling(none_stop=True)
